// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("APP_DATABASE_PRISMA_URL") // uses connection pooling
  directUrl  = env("APP_DATABASE_URL_NON_POOLING") // uses a direct connection
  extensions = [postgis()]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id @default(cuid())
  // Create a custom sequence that take some random numbers and add the incrementalId
  socialId       String    @unique @default(dbgenerated("generate_random_social_id()"))
  name           String
  email          String    @unique
  emailVerified  DateTime?
  profilePicture File?
  accounts       Account[]

  role                       UserRole                    @default(USER)
  password                   String?
  hasPassword                Boolean                     @default(false)
  resetPasswordToken         ResetPassordToken?
  userEmailVerificationToken UserEmailVerificationToken?
  lastLocale                 String?
  otpSecret                  String                      @default("")
  otpMnemonic                String                      @default("")
  otpVerified                Boolean                     @default(false)
  uploadsInProgress          FileUploading[]

  pet              Pet?
  changeEmailToken ChangeEmailToken?
  lastLocation     UserLocation?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLocation {
  id       Int                                   @id @default(autoincrement())
  location Unsupported("geography(Point, 4326)")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChangeEmailToken {
  identifier String   @unique
  token      String   @unique // OTP code
  newEmail   String
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

enum CHARACTERISTIC {
  FRIENDLY
  PLAYFUL
  CALM
  INTELLIGENT
  PROTECTIVE
  AFFECTIONATE
  CURIOUS
  ENERGETIC
  SWEET
  HAPPY
  LOVING
  QUIET
  SHY
  SOCIAL
  BRAVE
  CLEVER
  COOL
  CRAZY
  CUTE
  DOCILE
  DYNAMIC
  EASYGOING
  ENTHUSIASTIC
  FEARLESS
  FUNNY
  GENTLE
  JOYFUL
  KIND
  MATURE
  OBEDIENT
  PATIENT
  PEACEFUL
  SENSITIVE
  SERIOUS
  SMART
  STRONG
  TENDER
  TOUGH
  TRUSTWORTHY
  WISE
  ZEALOUS
  ADAPTABLE
  AMUSING
  CHARMING
  CHEERFUL
  COURAGEOUS
  DETERMINED
  FLEXIBLE
}

model Characteristic {
  id    String         @id @default(cuid())
  value CHARACTERISTIC
  pet   Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([value, petId])
}

enum PET_KIND {
  DOG
}

model Pet {
  id                        String           @id @default(cuid())
  name                      String
  description               String
  kind                      PET_KIND
  breed                     String // ex: "Golden Retriever"
  birthdate                 DateTime
  characteristics           Characteristic[]
  ownerId                   String           @unique
  owner                     User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  photos                    File[]
  researchedCharacteristics CHARACTERISTIC[]
  sourceActions             PetAction[]      @relation(name: "sourceAction")
  targetActions             PetAction[]      @relation(name: "targetAction")
  sourceMatches             Match[]          @relation(name: "sourceMatch")
  targetMatches             Match[]          @relation(name: "targetMatch")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, name])
}

//? For one time login links
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model ResetPassordToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model UserEmailVerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model File {
  id        String   @id @default(cuid())
  key       String   @unique
  filetype  String
  bucket    String
  endpoint  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int?

  userProfilePictureId String? @unique
  userProfilePicture   User?   @relation(fields: [userProfilePictureId], references: [id], onDelete: SetNull)
  petPhotosId          String?
  petPhotos            Pet?    @relation(fields: [petPhotosId], references: [id], onDelete: SetNull)

  fileUploadingId String?        @unique
  fileUploading   FileUploading? @relation(fields: [fileUploadingId], references: [id], onDelete: SetNull)
}

// Upload in progress
model FileUploading {
  id       String   @id @default(cuid())
  key      String   @unique
  filetype String
  bucket   String
  endpoint String
  expires  DateTime

  file File?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PET_ACTION {
  LIKE
  DISMISS
}

model PetAction {
  id          String     @id @default(cuid())
  sourcePetId String
  sourcePet   Pet        @relation(name: "sourceAction", fields: [sourcePetId], references: [id], onDelete: Cascade)
  targetPetId String
  targetPet   Pet        @relation(name: "targetAction", fields: [targetPetId], references: [id], onDelete: Cascade)
  action      PET_ACTION

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sourcePetId, targetPetId])
}

model Match {
  id        String @id @default(cuid())
  petId     String
  pet       Pet    @relation(name: "sourceMatch", fields: [petId], references: [id], onDelete: Cascade)
  matchedId String
  matched   Pet    @relation(name: "targetMatch", fields: [matchedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([petId, matchedId])
}
